name: Deploy Everything
on:
  workflow_call:
    inputs:
      env:
        required: true
        default: "Test"
        type: string
    secrets:
      AZURE_CREDENTIALS:
        required: true
      AZURE_STATIC_WEB_APPS_API_TOKEN:
        required: true
      TERRAFORM_STATE_ACCESS_KEY:
        required: true
      CLOUDFLARE_TOKEN:
        required: true
      CLOUDFLARE_ACCOUNT_ID:
        required: true

env:
  AZURE_WEBAPP_PACKAGE_PATH: PocketDDD.Server.WebAPI/publish
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 8.0.x
  WORKING_DIRECTORY: PocketDDD.Server/PocketDDD.Server.WebAPI

jobs:
  deploy_terraform:
    runs-on: ubuntu-latest
    name: Deploy terraform
    environment: ${{ inputs.env }}
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - uses: actions/checkout@v4
    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
    - name: Setup terraform
      uses: hashicorp/setup-terraform@v3
    - run: |
        terraform init -backend-config="key=${{ inputs.env }}.terraform.tfstate"

        terraform apply -auto-approve -var-file ../tfvars/${{ inputs.env }}.tfvars -var 'cloudflare_account_id=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}'
      env:
        ARM_ACCESS_KEY: ${{ secrets.TERRAFORM_STATE_ACCESS_KEY }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

  build_api_server:
    runs-on: ubuntu-latest
    name: Build API Server
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
    - name: Restore
      run: dotnet restore "${{ env.WORKING_DIRECTORY }}"
    - name: Build
      run: dotnet build "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-restore
    - name: Test
      run: dotnet test "${{ env.WORKING_DIRECTORY }}" --no-build
    - name: Publish
      run: dotnet publish "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"
    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: webapp
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  deploy_api_server:
    name: Deploy API Server
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    needs: [deploy_terraform, build_api_server]
    steps:
    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: webapp
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
    - name: Deploy to Azure WebApp
      uses: azure/webapps-deploy@v2
      with:
        app-name: pocketddd-${{ inputs.env }}-api-server-web-app
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  build_and_deploy_blazor_client:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    name: Build and Deploy Blazor Client
    needs: deploy_terraform
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'

      - run: |
          cp PocketDDD.BlazorClient/PocketDDD.BlazorClient/wwwroot/appsettings.${{ inputs.env }}.json PocketDDD.BlazorClient/PocketDDD.BlazorClient/wwwroot/appsettings.Production.json
        if: ${{ inputs.env != 'Production' }}

      - run: |
          apiToken=$(az staticwebapp secrets list --name pocketddd-${{ inputs.env }}-blazorclient --query "properties.apiKey" -o tsv)
          echo "WEB_APP_API_TOKEN=$apiToken" >> "$GITHUB_ENV"

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.WEB_APP_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "/PocketDDD.BlazorClient/PocketDDD.BlazorClient" # App source code path
          api_location: "" # Api source code path - optional
          output_location: "wwwroot" # Built app content directory - optional
          ###### End of Repository/Build Configurations ######
