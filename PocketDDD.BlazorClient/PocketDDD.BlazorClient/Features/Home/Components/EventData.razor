@using PocketDDD.BlazorClient.Features.Home.Store
@using Session = PocketDDD.BlazorClient.Features.Home.Store.Session
@inherits FluxorComponent

@inject NavigationManager NavigationManager
@inject IState<HomeState> State
@inject IDispatcher Dispatcher

<MudList Clickable="true">
    @foreach (var timeSlot in State.Value.EventMetaData)
    {
        <MudListSubheader Class="pb-0 pl-1 border-b border-solid mud-border-primary">
            <MudText Typo="Typo.h6">
                @timeSlot.From.ToString("h:mm")
                @timeSlot.From.ToString("tt").ToLowerInvariant()
            </MudText>
        </MudListSubheader>
        @if (timeSlot.Info is not null)
        {
            <MudListItem Class="ml-6">
                <MudText Typo="Typo.h5">@timeSlot.Info</MudText>
            </MudListItem>
        }

        @foreach (var sessionItem in timeSlot.Sessions.Select((session, index) => (session, index)))
        {
            <MudListItem>
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                @sessionItem.session.Title
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudToggleIconButton
                                ToggledChanged="@(_ => HandleToggleSessionBookmarked(sessionItem.session))"
                                Toggled="@sessionItem.session.IsBookmarked"
                                Icon="@Icons.Material.Filled.BookmarkBorder"
                                Color="@Color.Default"
                                ToggledIcon="@Icons.Material.Filled.Bookmark"
                                ToggledColor="@Color.Primary"
                                title="@(sessionItem.session.IsBookmarked ? "Unbookmark session" : "Bookmark session")"/>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent Class="d-flex flex-row justify-space-between">
                        <MudContainer Class="px-0">
                            <MudText Typo="Typo.subtitle2">@sessionItem.session.SpeakerName</MudText>
                            <MudText Typo="Typo.subtitle2">@sessionItem.session.RoomName</MudText>
                        </MudContainer>
                        @ShowSessionLength(sessionItem.session)
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton OnClick="() => HandleViewSession(sessionItem.session.Id)" Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true">
                            More details
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudListItem>

            @if (sessionItem.index != timeSlot.Sessions.Count - 1)
            {
                <MudDivider/>
            }
        }
    }

</MudList>

@code{

    RenderFragment ShowSessionLength(Session session)
    {
        var colour = Color.Info;

        if (session.Length == TimeSpan.FromMinutes(30))
            colour = Color.Secondary;
        else if (session.Length == TimeSpan.FromMinutes(15))
            colour = Color.Tertiary;

        return @<MudChip Color="@colour" Variant="Variant.Outlined">@GetTimeSpanDisplayText(session.Length)</MudChip>;
    }

}

@code {

    void HandleViewSession(int sessionId)
    {
        NavigationManager.NavigateTo($"session/{sessionId}");
    }

    void HandleToggleSessionBookmarked(Session session)
    {
        Dispatcher.Dispatch(new ToggleBookmarkedAction(session.Id, !session.IsBookmarked));
    }

    private static string GetTimeSpanDisplayText(TimeSpan timeSpan)
    {
        if (timeSpan < TimeSpan.FromHours(1))
        {
            return $"{timeSpan.Minutes} minutes";
        }

        return timeSpan == TimeSpan.FromHours(1) ? "1 hour" : $"{timeSpan.TotalHours:F1} hours";
    }

}
